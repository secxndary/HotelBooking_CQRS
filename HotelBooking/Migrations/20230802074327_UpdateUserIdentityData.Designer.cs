// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace HotelBooking.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230802074327_UpdateUserIdentityData")]
    partial class UpdateUserIdentityData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.UserIdentity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1567fa9b-7fc8-4f4f-b4df-896397616bfe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5495234c-ba56-45dd-b4b4-1498ed9dae1b",
                            Email = "johndoe@example.org",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = true,
                            NormalizedEmail = "JOHNDOE@EXAMPLE.ORG",
                            NormalizedUserName = "JOHNDOE",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGzPOccYwucA6sQEj5E55e0KpyBuWurkfoUDOEBTe2FNdkpwiRbKI++HV/hopSptA==",
                            PhoneNumber = "+375291234567",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "18ab79cd-6a56-489f-9347-d11fdedd026c",
                            TwoFactorEnabled = false,
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = "27bc938b-a6b3-4c8e-ba6b-74ddadb424ed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8adf16a-73b4-4978-a81b-f248f2f19b7f",
                            Email = "janedoe@example.org",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = true,
                            NormalizedEmail = "JANEDOE@EXAMPLE.ORG",
                            NormalizedUserName = "JANEDOE",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGzPOccYwucA6sQEj5E55e0KpyBuWurkfoUDOEBTe2FNdkpwiRbKI++HV/hopSptA==",
                            PhoneNumber = "+375447654321",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "ad1057cb-05ac-45a9-9dfa-b265ba450e16",
                            TwoFactorEnabled = false,
                            UserName = "janedoe"
                        },
                        new
                        {
                            Id = "3a08ecca-7fbe-4886-ad58-61998c01c9e0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7040986f-2083-463c-85ef-55a7adce6ee7",
                            Email = "valdaitsevv@mail.ru",
                            EmailConfirmed = false,
                            FirstName = "Alexander",
                            LastName = "Valdaitsev",
                            LockoutEnabled = true,
                            NormalizedEmail = "VALDAITSEVV@MAIL.RU",
                            NormalizedUserName = "VALDAITSEVV",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGzPOccYwucA6sQEj5E55e0KpyBuWurkfoUDOEBTe2FNdkpwiRbKI++HV/hopSptA==",
                            PhoneNumber = "+375445574506",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "e4971ce8-881a-419e-872d-b42ee04b74c1",
                            TwoFactorEnabled = false,
                            UserName = "valdaitsevv"
                        },
                        new
                        {
                            Id = "a3c2b7a1-6c0e-4fa0-b3bd-ed1d2c428cf9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32dd396a-5a0b-42de-a7da-b791c5836471",
                            Email = "katie@mail.ru",
                            EmailConfirmed = false,
                            FirstName = "Katherine",
                            LastName = "Vrublevskaya",
                            LockoutEnabled = true,
                            NormalizedEmail = "KATIE@MAIL.RU",
                            NormalizedUserName = "SASHASBABE",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGzPOccYwucA6sQEj5E55e0KpyBuWurkfoUDOEBTe2FNdkpwiRbKI++HV/hopSptA==",
                            PhoneNumber = "+375333749235",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "2ed78dbc-9b06-4267-8e43-d31b7a5293a8",
                            TwoFactorEnabled = false,
                            UserName = "sashasbabe"
                        },
                        new
                        {
                            Id = "f94a3937-8935-48a4-81f3-4d6e33603c65",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bee40aa7-07fd-49d7-89a6-cd5565fe550b",
                            Email = "default@example.org",
                            EmailConfirmed = false,
                            FirstName = "Default",
                            LastName = "User",
                            LockoutEnabled = true,
                            NormalizedEmail = "DEFAULT@EXAMPLE.ORG",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGzPOccYwucA6sQEj5E55e0KpyBuWurkfoUDOEBTe2FNdkpwiRbKI++HV/hopSptA==",
                            PhoneNumber = "+375294859923",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "da78a2c6-fbba-44dd-8634-e8ae34e75bed",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        },
                        new
                        {
                            Id = "eb8fd43e-aa3d-4bf2-bfac-b70af06668e9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f116917d-4b22-44d5-8d51-efcc669c02cd",
                            Email = "root@example.org",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Root",
                            LockoutEnabled = true,
                            NormalizedEmail = "ROOT@EXAMPLE.ORG",
                            NormalizedUserName = "ROOT",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGzPOccYwucA6sQEj5E55e0KpyBuWurkfoUDOEBTe2FNdkpwiRbKI++HV/hopSptA==",
                            PhoneNumber = "+375449274568",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "a0468da0-d269-4737-81fb-86c8c7746c81",
                            TwoFactorEnabled = false,
                            UserName = "root"
                        },
                        new
                        {
                            Id = "c459163f-341b-4073-a7b7-067c1ceeac15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22ccc62e-8f1f-433b-8f21-416ac4478215",
                            Email = "krotnichenko@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Александр",
                            LastName = "Кротниченко",
                            LockoutEnabled = true,
                            NormalizedEmail = "KROTNICHENKO@GMAIL.COM",
                            NormalizedUserName = "PRESIDENTOWNER",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGzPOccYwucA6sQEj5E55e0KpyBuWurkfoUDOEBTe2FNdkpwiRbKI++HV/hopSptA==",
                            PhoneNumber = "+375333744859",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "a59e3352-9002-4169-b29c-e74b033e8497",
                            TwoFactorEnabled = false,
                            UserName = "presidentowner"
                        },
                        new
                        {
                            Id = "42e40179-1f6c-41b7-be2f-754023e576fa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5c40318-2393-49e7-a501-d3deae7a134b",
                            Email = "shaman@belstu.by",
                            EmailConfirmed = false,
                            FirstName = "Дмитрий",
                            LastName = "Шаман",
                            LockoutEnabled = true,
                            NormalizedEmail = "SHAMAN@BELSTU.BY",
                            NormalizedUserName = "SHAMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGzPOccYwucA6sQEj5E55e0KpyBuWurkfoUDOEBTe2FNdkpwiRbKI++HV/hopSptA==",
                            PhoneNumber = "+375293749574",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "a0ab07e2-1f66-4a0b-9ab5-9a516aa314c3",
                            TwoFactorEnabled = false,
                            UserName = "shaman"
                        },
                        new
                        {
                            Id = "ed3707a2-a416-4318-95a6-e462b10e9936",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c11cab68-c6f9-4710-bf8f-31441e5acdbc",
                            Email = "vmazenkova@mail.ru",
                            EmailConfirmed = false,
                            FirstName = "Василиса",
                            LastName = "Мазенкова",
                            LockoutEnabled = true,
                            NormalizedEmail = "VMAZENKOVA@MAIL.RU",
                            NormalizedUserName = "VMAZENKOVA",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGzPOccYwucA6sQEj5E55e0KpyBuWurkfoUDOEBTe2FNdkpwiRbKI++HV/hopSptA==",
                            PhoneNumber = "+375447568124",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "2d6212d4-3ddb-4961-92ce-f9c3acb58f99",
                            TwoFactorEnabled = false,
                            UserName = "vmazenkova"
                        },
                        new
                        {
                            Id = "ba8fe5c0-0c4e-49c0-b12e-5dd834b6e8d6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79c89ca8-1c0d-4306-b82a-b66f6aae6e1e",
                            Email = "viktorkon@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Виктор",
                            LastName = "Кондратьев",
                            LockoutEnabled = true,
                            NormalizedEmail = "VIKTORKON@GMAIL.COM",
                            NormalizedUserName = "VIKTORRR",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGzPOccYwucA6sQEj5E55e0KpyBuWurkfoUDOEBTe2FNdkpwiRbKI++HV/hopSptA==",
                            PhoneNumber = "+375448569125",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "0a430147-0110-4469-bd83-d2b05bee0a14",
                            TwoFactorEnabled = false,
                            UserName = "viktorrr"
                        });
                });

            modelBuilder.Entity("Entities.Models.UserModels.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TextNegative")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextPositive")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c4e7c41-7dbe-475f-82ae-4000eb5c4e3d"),
                            ReservationId = new Guid("d013f366-32d2-419b-b413-ee71f557435f"),
                            TextNegative = "Я передумал мне ничего не понравилось",
                            TextPositive = "Всё очень круто мне все понравилось"
                        },
                        new
                        {
                            Id = new Guid("3217a198-5a8e-4818-9a7d-786043572775"),
                            ReservationId = new Guid("0eb13a89-60ee-4d59-b991-908a4412bf0a"),
                            TextNegative = "Не обнаружено",
                            TextPositive = "Хороший отель интересные конкурсы"
                        },
                        new
                        {
                            Id = new Guid("f0eefc9b-4cbe-4ee7-ae1e-37b335404b72"),
                            ReservationId = new Guid("6a5d35dc-682e-4d02-9e6b-a70550ef9061"),
                            TextNegative = "Перечислены выше",
                            TextPositive = "Понравилось всё кроме отсутствия завтрака"
                        },
                        new
                        {
                            Id = new Guid("53032864-6d72-4367-b775-8915a17fb14b"),
                            ReservationId = new Guid("db277d82-62fd-49b8-b3ed-ad5976c1167c"),
                            TextNegative = "всё остальное.",
                            TextPositive = "отсутствует."
                        },
                        new
                        {
                            Id = new Guid("5f0c42ec-4f0b-4d1a-b4d9-8b04513b204f"),
                            ReservationId = new Guid("33f113d0-29af-4b2a-ac16-8a8e47aa4fcf"),
                            TextNegative = "Тумба, полка не понравились",
                            TextPositive = "Напитки, завтрак в постель, ламинат"
                        },
                        new
                        {
                            Id = new Guid("2b3b877e-b5c5-4ae8-b336-118492997598"),
                            ReservationId = new Guid("ba4a5cf4-fee9-4470-8de1-dd8333e4575d"),
                            TextNegative = "А девушка на ресепшене нет",
                            TextPositive = "Консьерж был со мной вежлив"
                        });
                });

            modelBuilder.Entity("Entities.Models.UserModels.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Description = "Президентский отель Премиум-класса",
                            Name = "President Hotel",
                            Stars = 5
                        },
                        new
                        {
                            Id = new Guid("f934d940-f542-400b-8182-aea42a9b0773"),
                            Description = "Дефолтный 3-звездочный отель",
                            Name = "Турист",
                            Stars = 3
                        },
                        new
                        {
                            Id = new Guid("e418aacc-8a7c-4d78-b509-24dd42e823ee"),
                            Description = "Для настоящих патриотов",
                            Name = "Беларусь",
                            Stars = 4
                        },
                        new
                        {
                            Id = new Guid("0c6cc6d4-3f8c-43d2-9591-230cb646aab9"),
                            Description = "Лесное убежище",
                            Name = "Поляна",
                            Stars = 2
                        });
                });

            modelBuilder.Entity("Entities.Models.UserModels.HotelPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelPhotos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c348d19a-e17a-4d27-8ff9-f6ab68130e3a"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Path = "../../../Content/Images/Hotels/president-1.jpeg"
                        },
                        new
                        {
                            Id = new Guid("59458cf1-d34c-46ea-b723-02b805da8ea8"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Path = "../../../Content/Images/Hotels/president-2.jpeg"
                        },
                        new
                        {
                            Id = new Guid("df864455-1cb5-4055-80fe-02aa5a64d643"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Path = "../../../Content/Images/Hotels/president-3.jpeg"
                        },
                        new
                        {
                            Id = new Guid("5d7dd90e-52eb-4252-9c98-85f04347fb77"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Path = "../../../Content/Images/Hotels/president-4.jpeg"
                        },
                        new
                        {
                            Id = new Guid("a061132d-d023-45dd-af0e-b64a4621367c"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Path = "../../../Content/Images/Hotels/president-5.jpeg"
                        },
                        new
                        {
                            Id = new Guid("d63d7704-65aa-4ba3-bca1-daedf16c4769"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Path = "../../../Content/Images/Hotels/president-6.jpeg"
                        },
                        new
                        {
                            Id = new Guid("04c07bdb-7007-44cb-93da-88cbc804eb42"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Path = "../../../Content/Images/Hotels/president-7.jpeg"
                        },
                        new
                        {
                            Id = new Guid("bee00602-95cd-4b33-b481-4a0c96a59a4e"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Path = "../../../Content/Images/Hotels/president-8.jpeg"
                        },
                        new
                        {
                            Id = new Guid("bdf29223-54a6-4bd5-bcdc-acf82f191d0a"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Path = "../../../Content/Images/Hotels/president-9.jpeg"
                        },
                        new
                        {
                            Id = new Guid("abafd7d4-6505-432a-87cd-5697610e80a3"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Path = "../../../Content/Images/Hotels/president-10.jpeg"
                        },
                        new
                        {
                            Id = new Guid("b6f53299-7bb6-40e8-a199-a0ff89f80ed1"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Path = "../../../Content/Images/Hotels/president-11.jpeg"
                        },
                        new
                        {
                            Id = new Guid("e82233dd-6b1e-4aac-b0f3-cc266c8b7e30"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Path = "../../../Content/Images/Hotels/president-12.jpeg"
                        },
                        new
                        {
                            Id = new Guid("2582f52f-ee8e-4883-80c0-da66964834fc"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Path = "../../../Content/Images/Hotels/president-13.jpeg"
                        },
                        new
                        {
                            Id = new Guid("44072262-47f2-4de3-9228-fd70b8dc6152"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Path = "../../../Content/Images/Hotels/president-14.jpeg"
                        },
                        new
                        {
                            Id = new Guid("c1454523-6462-4ad3-ada9-586ac4cd15d4"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Path = "../../../Content/Images/Hotels/president-15.jpeg"
                        },
                        new
                        {
                            Id = new Guid("3d342424-c0bb-430a-aaa5-e7f4f303218c"),
                            HotelId = new Guid("e418aacc-8a7c-4d78-b509-24dd42e823ee"),
                            Path = "../../../Content/Images/Hotels/belarus-1.jpeg"
                        },
                        new
                        {
                            Id = new Guid("e6ed8378-aab5-4092-93e3-07d71d8011d3"),
                            HotelId = new Guid("e418aacc-8a7c-4d78-b509-24dd42e823ee"),
                            Path = "../../../Content/Images/Hotels/belarus-2.jpeg"
                        },
                        new
                        {
                            Id = new Guid("b4df0d3f-ffea-4da9-a35c-0ea2a0a6c711"),
                            HotelId = new Guid("e418aacc-8a7c-4d78-b509-24dd42e823ee"),
                            Path = "../../../Content/Images/Hotels/belarus-3.jpeg"
                        },
                        new
                        {
                            Id = new Guid("f2bbfc71-b2ca-42b7-a010-8eb12b0cb70f"),
                            HotelId = new Guid("e418aacc-8a7c-4d78-b509-24dd42e823ee"),
                            Path = "../../../Content/Images/Hotels/belarus-4.jpeg"
                        },
                        new
                        {
                            Id = new Guid("f62ed813-562d-4e4f-95d1-ff385b11f016"),
                            HotelId = new Guid("e418aacc-8a7c-4d78-b509-24dd42e823ee"),
                            Path = "../../../Content/Images/Hotels/belarus-5.jpeg"
                        },
                        new
                        {
                            Id = new Guid("119747c5-ddf0-4424-9fbd-9b5d72436961"),
                            HotelId = new Guid("e418aacc-8a7c-4d78-b509-24dd42e823ee"),
                            Path = "../../../Content/Images/Hotels/belarus-6.jpeg"
                        },
                        new
                        {
                            Id = new Guid("0f8acada-d7bd-48dc-9bcb-dab862f9d7fb"),
                            HotelId = new Guid("f934d940-f542-400b-8182-aea42a9b0773"),
                            Path = "../../../Content/Images/Hotels/tourist-1.jpeg"
                        },
                        new
                        {
                            Id = new Guid("a1409c52-f913-484a-8818-50faf356e758"),
                            HotelId = new Guid("f934d940-f542-400b-8182-aea42a9b0773"),
                            Path = "../../../Content/Images/Hotels/tourist-2.jpeg"
                        },
                        new
                        {
                            Id = new Guid("b9c30434-24b1-431e-ab90-983e94304d5b"),
                            HotelId = new Guid("f934d940-f542-400b-8182-aea42a9b0773"),
                            Path = "../../../Content/Images/Hotels/tourist-3.jpeg"
                        },
                        new
                        {
                            Id = new Guid("d7493c84-ae52-489a-8b22-57263819df3b"),
                            HotelId = new Guid("f934d940-f542-400b-8182-aea42a9b0773"),
                            Path = "../../../Content/Images/Hotels/tourist-4.jpeg"
                        },
                        new
                        {
                            Id = new Guid("ebe39b18-6a9d-46d3-a46e-9edc75341e2f"),
                            HotelId = new Guid("0c6cc6d4-3f8c-43d2-9591-230cb646aab9"),
                            Path = "../../../Content/Images/Hotels/polyana-1.jpeg"
                        },
                        new
                        {
                            Id = new Guid("b79c720e-70cc-435f-a099-60fcfdef0ffd"),
                            HotelId = new Guid("0c6cc6d4-3f8c-43d2-9591-230cb646aab9"),
                            Path = "../../../Content/Images/Hotels/polyana-2.jpeg"
                        },
                        new
                        {
                            Id = new Guid("74b7273d-2eb3-4e10-825d-0113584ca033"),
                            HotelId = new Guid("0c6cc6d4-3f8c-43d2-9591-230cb646aab9"),
                            Path = "../../../Content/Images/Hotels/polyana-3.jpeg"
                        });
                });

            modelBuilder.Entity("Entities.Models.UserModels.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateExit")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d013f366-32d2-419b-b413-ee71f557435f"),
                            DateEntry = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateExit = new DateTime(2023, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = new Guid("f8fb0b5c-d693-4e8c-934f-2ad79dba1bdc"),
                            UserId = "3a08ecca-7fbe-4886-ad58-61998c01c9e0"
                        },
                        new
                        {
                            Id = new Guid("ff8f27ee-af5d-485f-9074-0598b9e73ac4"),
                            DateEntry = new DateTime(2023, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateExit = new DateTime(2023, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = new Guid("4c1447d2-50f6-4397-9abb-b9b21e8661f2"),
                            UserId = "3a08ecca-7fbe-4886-ad58-61998c01c9e0"
                        },
                        new
                        {
                            Id = new Guid("6a5d35dc-682e-4d02-9e6b-a70550ef9061"),
                            DateEntry = new DateTime(2023, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateExit = new DateTime(2023, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = new Guid("f1960e67-d4c1-4b40-a454-f39fb3a655f2"),
                            UserId = "3a08ecca-7fbe-4886-ad58-61998c01c9e0"
                        },
                        new
                        {
                            Id = new Guid("0eb13a89-60ee-4d59-b991-908a4412bf0a"),
                            DateEntry = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateExit = new DateTime(2023, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = new Guid("1e7bbd59-e683-4700-b8f0-d279ba1304bb"),
                            UserId = "a3c2b7a1-6c0e-4fa0-b3bd-ed1d2c428cf9"
                        },
                        new
                        {
                            Id = new Guid("db277d82-62fd-49b8-b3ed-ad5976c1167c"),
                            DateEntry = new DateTime(2023, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateExit = new DateTime(2023, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = new Guid("1e7bbd59-e683-4700-b8f0-d279ba1304bb"),
                            UserId = "a3c2b7a1-6c0e-4fa0-b3bd-ed1d2c428cf9"
                        },
                        new
                        {
                            Id = new Guid("a9c9cf7b-f141-4a38-836c-da7c4183841d"),
                            DateEntry = new DateTime(2023, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateExit = new DateTime(2023, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = new Guid("7bd76d93-3167-49fe-98fc-7e4de14ac8b7"),
                            UserId = "a3c2b7a1-6c0e-4fa0-b3bd-ed1d2c428cf9"
                        },
                        new
                        {
                            Id = new Guid("33f113d0-29af-4b2a-ac16-8a8e47aa4fcf"),
                            DateEntry = new DateTime(2023, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateExit = new DateTime(2023, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = new Guid("684ff150-741e-4706-9306-07d4064efdb1"),
                            UserId = "f94a3937-8935-48a4-81f3-4d6e33603c65"
                        },
                        new
                        {
                            Id = new Guid("ba4a5cf4-fee9-4470-8de1-dd8333e4575d"),
                            DateEntry = new DateTime(2023, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateExit = new DateTime(2023, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = new Guid("96efe1d7-d219-4beb-a977-c5689fdfa062"),
                            UserId = "f94a3937-8935-48a4-81f3-4d6e33603c65"
                        });
                });

            modelBuilder.Entity("Entities.Models.UserModels.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SleepingPlaces")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8fb0b5c-d693-4e8c-934f-2ad79dba1bdc"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Price = 365.0,
                            Quantity = 18,
                            RoomTypeId = new Guid("2d2205b1-2c38-4b92-a710-cf4861e1c6cf"),
                            SleepingPlaces = 2
                        },
                        new
                        {
                            Id = new Guid("7bd76d93-3167-49fe-98fc-7e4de14ac8b7"),
                            HotelId = new Guid("f934d940-f542-400b-8182-aea42a9b0773"),
                            Price = 310.0,
                            Quantity = 20,
                            RoomTypeId = new Guid("2d2205b1-2c38-4b92-a710-cf4861e1c6cf"),
                            SleepingPlaces = 4
                        },
                        new
                        {
                            Id = new Guid("684ff150-741e-4706-9306-07d4064efdb1"),
                            HotelId = new Guid("e418aacc-8a7c-4d78-b509-24dd42e823ee"),
                            Price = 320.0,
                            Quantity = 14,
                            RoomTypeId = new Guid("2d2205b1-2c38-4b92-a710-cf4861e1c6cf"),
                            SleepingPlaces = 2
                        },
                        new
                        {
                            Id = new Guid("7ab73b73-6712-4454-84d3-1694a61a22eb"),
                            HotelId = new Guid("0c6cc6d4-3f8c-43d2-9591-230cb646aab9"),
                            Price = 255.0,
                            Quantity = 10,
                            RoomTypeId = new Guid("2d2205b1-2c38-4b92-a710-cf4861e1c6cf"),
                            SleepingPlaces = 3
                        },
                        new
                        {
                            Id = new Guid("59f51f88-0af4-4d98-882f-1ad1eccd8fd5"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Price = 678.0,
                            Quantity = 12,
                            RoomTypeId = new Guid("628cb11b-e91c-4faf-b5d9-fc41d79496fa"),
                            SleepingPlaces = 2
                        },
                        new
                        {
                            Id = new Guid("8c36266a-e422-4489-880a-c279f56340b2"),
                            HotelId = new Guid("e418aacc-8a7c-4d78-b509-24dd42e823ee"),
                            Price = 400.0,
                            Quantity = 6,
                            RoomTypeId = new Guid("628cb11b-e91c-4faf-b5d9-fc41d79496fa"),
                            SleepingPlaces = 2
                        },
                        new
                        {
                            Id = new Guid("fccf41b7-b6a6-4f15-8a3b-fd50d67661db"),
                            HotelId = new Guid("e418aacc-8a7c-4d78-b509-24dd42e823ee"),
                            Price = 370.0,
                            Quantity = 8,
                            RoomTypeId = new Guid("386c05e6-a4a5-451f-8363-246ff66367e9"),
                            SleepingPlaces = 4
                        },
                        new
                        {
                            Id = new Guid("0bab8e32-e14b-4cd6-90ae-cf795fee80d8"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Price = 450.0,
                            Quantity = 6,
                            RoomTypeId = new Guid("386c05e6-a4a5-451f-8363-246ff66367e9"),
                            SleepingPlaces = 2
                        },
                        new
                        {
                            Id = new Guid("4c1447d2-50f6-4397-9abb-b9b21e8661f2"),
                            HotelId = new Guid("f934d940-f542-400b-8182-aea42a9b0773"),
                            Price = 485.0,
                            Quantity = 14,
                            RoomTypeId = new Guid("386c05e6-a4a5-451f-8363-246ff66367e9"),
                            SleepingPlaces = 6
                        },
                        new
                        {
                            Id = new Guid("96efe1d7-d219-4beb-a977-c5689fdfa062"),
                            HotelId = new Guid("0c6cc6d4-3f8c-43d2-9591-230cb646aab9"),
                            Price = 295.0,
                            Quantity = 6,
                            RoomTypeId = new Guid("386c05e6-a4a5-451f-8363-246ff66367e9"),
                            SleepingPlaces = 4
                        },
                        new
                        {
                            Id = new Guid("1e7bbd59-e683-4700-b8f0-d279ba1304bb"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Price = 1020.0,
                            Quantity = 2,
                            RoomTypeId = new Guid("c7e74df3-94ad-4e25-b3c1-1a053ce1ff55"),
                            SleepingPlaces = 4
                        },
                        new
                        {
                            Id = new Guid("fe3b278a-3271-4a08-9b51-731d346fd8dc"),
                            HotelId = new Guid("e418aacc-8a7c-4d78-b509-24dd42e823ee"),
                            Price = 860.0,
                            Quantity = 4,
                            RoomTypeId = new Guid("c7e74df3-94ad-4e25-b3c1-1a053ce1ff55"),
                            SleepingPlaces = 4
                        },
                        new
                        {
                            Id = new Guid("f1960e67-d4c1-4b40-a454-f39fb3a655f2"),
                            HotelId = new Guid("894622e4-9303-4ee8-a25b-dbea1c26eb1a"),
                            Price = 1045.0,
                            Quantity = 2,
                            RoomTypeId = new Guid("984c5d2c-28f4-4ecc-ad45-d3c59d16fdbf"),
                            SleepingPlaces = 8
                        });
                });

            modelBuilder.Entity("Entities.Models.UserModels.RoomPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomPhotos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e0294f6-8b34-4822-9f0a-b9ffc71eb193"),
                            Path = "../../../Content/Images/Rooms/president-standart-bathroom.jpeg",
                            RoomId = new Guid("f8fb0b5c-d693-4e8c-934f-2ad79dba1bdc")
                        },
                        new
                        {
                            Id = new Guid("a5dbdace-9b51-4cff-8147-b86cbe8debd6"),
                            Path = "../../../Content/Images/Rooms/president-standart-bed.jpeg",
                            RoomId = new Guid("f8fb0b5c-d693-4e8c-934f-2ad79dba1bdc")
                        },
                        new
                        {
                            Id = new Guid("1099afd2-2a88-40de-b887-9ab9357efbea"),
                            Path = "../../../Content/Images/Rooms/president-lux-bed.jpeg",
                            RoomId = new Guid("59f51f88-0af4-4d98-882f-1ad1eccd8fd5")
                        },
                        new
                        {
                            Id = new Guid("513962ee-e04b-4fc6-8316-7d7c70b94b13"),
                            Path = "../../../Content/Images/Rooms/president-lux-livingroom.jpeg",
                            RoomId = new Guid("59f51f88-0af4-4d98-882f-1ad1eccd8fd5")
                        },
                        new
                        {
                            Id = new Guid("8585a06c-1e9c-499d-a700-33bf69bdff3b"),
                            Path = "../../../Content/Images/Rooms/president-semilux-bathroom.jpeg",
                            RoomId = new Guid("0bab8e32-e14b-4cd6-90ae-cf795fee80d8")
                        },
                        new
                        {
                            Id = new Guid("3edcb92d-7592-49ec-9c71-022c153a9c3d"),
                            Path = "../../../Content/Images/Rooms/president-semilux-bed.jpeg",
                            RoomId = new Guid("0bab8e32-e14b-4cd6-90ae-cf795fee80d8")
                        },
                        new
                        {
                            Id = new Guid("52e0843f-8f2e-4a7c-9c3c-ed788b062613"),
                            Path = "../../../Content/Images/Rooms/president-semilux-livingroom.jpeg",
                            RoomId = new Guid("0bab8e32-e14b-4cd6-90ae-cf795fee80d8")
                        },
                        new
                        {
                            Id = new Guid("f7fe0be5-a800-443d-93a2-bb90519c71be"),
                            Path = "../../../Content/Images/Rooms/president-semilux-livingroom-2.jpeg",
                            RoomId = new Guid("0bab8e32-e14b-4cd6-90ae-cf795fee80d8")
                        },
                        new
                        {
                            Id = new Guid("135c191d-e0c9-4f65-a872-7c9f5ce70ecd"),
                            Path = "../../../Content/Images/Rooms/president-apartments-bed.jpeg",
                            RoomId = new Guid("f1960e67-d4c1-4b40-a454-f39fb3a655f2")
                        },
                        new
                        {
                            Id = new Guid("f4f69c6f-2bf6-4e78-8c9b-21fa7902a701"),
                            Path = "../../../Content/Images/Rooms/president-apartments-kitchen.jpeg",
                            RoomId = new Guid("f1960e67-d4c1-4b40-a454-f39fb3a655f2")
                        },
                        new
                        {
                            Id = new Guid("660e5e4a-221f-4887-8b61-c8b57afb61b5"),
                            Path = "../../../Content/Images/Rooms/president-apartments-livingroom.jpeg",
                            RoomId = new Guid("f1960e67-d4c1-4b40-a454-f39fb3a655f2")
                        },
                        new
                        {
                            Id = new Guid("f63a8b8f-8b6b-407d-afa1-e632de572896"),
                            Path = "../../../Content/Images/Rooms/president-apartments-table.jpeg",
                            RoomId = new Guid("f1960e67-d4c1-4b40-a454-f39fb3a655f2")
                        },
                        new
                        {
                            Id = new Guid("0bc90b3c-70bd-447e-9f59-6fa1b7f0170e"),
                            Path = "../../../Content/Images/Rooms/belarus-semilux-bathroom.jpeg",
                            RoomId = new Guid("fccf41b7-b6a6-4f15-8a3b-fd50d67661db")
                        },
                        new
                        {
                            Id = new Guid("f701db8c-7575-40b9-a1f0-bc2af359a59e"),
                            Path = "../../../Content/Images/Rooms/belarus-semilux-bed.jpeg",
                            RoomId = new Guid("fccf41b7-b6a6-4f15-8a3b-fd50d67661db")
                        },
                        new
                        {
                            Id = new Guid("2a6cb5f8-e341-4d81-ab56-a0e61d693caf"),
                            Path = "../../../Content/Images/Rooms/belarus-semilux-livingroom.jpeg",
                            RoomId = new Guid("fccf41b7-b6a6-4f15-8a3b-fd50d67661db")
                        },
                        new
                        {
                            Id = new Guid("ff522e71-70a3-41f2-b462-4485df71c03d"),
                            Path = "../../../Content/Images/Rooms/belarus-semilux-table.jpeg",
                            RoomId = new Guid("fccf41b7-b6a6-4f15-8a3b-fd50d67661db")
                        },
                        new
                        {
                            Id = new Guid("67ed8c03-77aa-42fd-87c0-f3e8a93d2fc6"),
                            Path = "../../../Content/Images/Rooms/tourist-standart-bathroom.jpeg",
                            RoomId = new Guid("7bd76d93-3167-49fe-98fc-7e4de14ac8b7")
                        },
                        new
                        {
                            Id = new Guid("1b73584d-f785-4364-ba1c-41e45772e820"),
                            Path = "../../../Content/Images/Rooms/tourist-standart-bed.jpeg",
                            RoomId = new Guid("7bd76d93-3167-49fe-98fc-7e4de14ac8b7")
                        });
                });

            modelBuilder.Entity("Entities.Models.UserModels.RoomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d2205b1-2c38-4b92-a710-cf4861e1c6cf"),
                            Description = "Стандартный классический номер",
                            Name = "Стандарт"
                        },
                        new
                        {
                            Id = new Guid("628cb11b-e91c-4faf-b5d9-fc41d79496fa"),
                            Description = "Для богатых",
                            Name = "Люкс"
                        },
                        new
                        {
                            Id = new Guid("386c05e6-a4a5-451f-8363-246ff66367e9"),
                            Description = "Для полубогатых",
                            Name = "Полулюкс"
                        },
                        new
                        {
                            Id = new Guid("c7e74df3-94ad-4e25-b3c1-1a053ce1ff55"),
                            Description = "Для очень богатых",
                            Name = "Премиум"
                        },
                        new
                        {
                            Id = new Guid("984c5d2c-28f4-4ecc-ad45-d3c59d16fdbf"),
                            Description = "Для большого количества гостей",
                            Name = "Апартаменты"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f51135f0-adf7-4506-960e-f10ae287f792",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "744a95cd-b364-44bd-842d-6ca02f9fe5fa",
                            Name = "HotelOwner",
                            NormalizedName = "HOTELOWNER"
                        },
                        new
                        {
                            Id = "2bb2806b-1cf8-4dfd-9b69-ffc889f3e577",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "eb8fd43e-aa3d-4bf2-bfac-b70af06668e9",
                            RoleId = "f51135f0-adf7-4506-960e-f10ae287f792"
                        },
                        new
                        {
                            UserId = "1567fa9b-7fc8-4f4f-b4df-896397616bfe",
                            RoleId = "2bb2806b-1cf8-4dfd-9b69-ffc889f3e577"
                        },
                        new
                        {
                            UserId = "27bc938b-a6b3-4c8e-ba6b-74ddadb424ed",
                            RoleId = "2bb2806b-1cf8-4dfd-9b69-ffc889f3e577"
                        },
                        new
                        {
                            UserId = "3a08ecca-7fbe-4886-ad58-61998c01c9e0",
                            RoleId = "2bb2806b-1cf8-4dfd-9b69-ffc889f3e577"
                        },
                        new
                        {
                            UserId = "a3c2b7a1-6c0e-4fa0-b3bd-ed1d2c428cf9",
                            RoleId = "2bb2806b-1cf8-4dfd-9b69-ffc889f3e577"
                        },
                        new
                        {
                            UserId = "f94a3937-8935-48a4-81f3-4d6e33603c65",
                            RoleId = "2bb2806b-1cf8-4dfd-9b69-ffc889f3e577"
                        },
                        new
                        {
                            UserId = "c459163f-341b-4073-a7b7-067c1ceeac15",
                            RoleId = "744a95cd-b364-44bd-842d-6ca02f9fe5fa"
                        },
                        new
                        {
                            UserId = "42e40179-1f6c-41b7-be2f-754023e576fa",
                            RoleId = "744a95cd-b364-44bd-842d-6ca02f9fe5fa"
                        },
                        new
                        {
                            UserId = "ed3707a2-a416-4318-95a6-e462b10e9936",
                            RoleId = "744a95cd-b364-44bd-842d-6ca02f9fe5fa"
                        },
                        new
                        {
                            UserId = "ba8fe5c0-0c4e-49c0-b12e-5dd834b6e8d6",
                            RoleId = "744a95cd-b364-44bd-842d-6ca02f9fe5fa"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.UserModels.Feedback", b =>
                {
                    b.HasOne("Entities.Models.UserModels.Reservation", "Reservation")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Entities.Models.UserModels.HotelPhoto", b =>
                {
                    b.HasOne("Entities.Models.UserModels.Hotel", "Hotel")
                        .WithMany("HotelPhotos")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Entities.Models.UserModels.Reservation", b =>
                {
                    b.HasOne("Entities.Models.UserModels.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.UserIdentity", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.UserModels.Room", b =>
                {
                    b.HasOne("Entities.Models.UserModels.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.UserModels.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Entities.Models.UserModels.RoomPhoto", b =>
                {
                    b.HasOne("Entities.Models.UserModels.Room", "Room")
                        .WithMany("RoomPhotos")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.UserModels.Hotel", b =>
                {
                    b.Navigation("HotelPhotos");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Entities.Models.UserModels.Reservation", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Entities.Models.UserModels.Room", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("RoomPhotos");
                });

            modelBuilder.Entity("Entities.Models.UserModels.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
